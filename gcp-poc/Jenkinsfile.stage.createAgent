#!/usr/bin/env groovy
import groovy.json.JsonSlurperClassic

def call(){
    def load_release_info = load "${env.WORKSPACE}/Automation/gcp-poc/Jenkinsfile.util.readJsonfile"
    def existing_agents_list = load "${env.WORKSPACE}/Automation/gcp-poc/Jenkinsfile.util.getExistingAgent"
    def restore_agent = load "${env.WORKSPACE}/Automation/gcp-poc/Jenkinsfile.util.restoreAgent"
    if (load_release_info()[0].size() != 0){
        println ("** Start CREATING agent **")
        def apiPreparation = load "${env.WORKSPACE}/Automation/gcp-poc/Jenkinsfile.util.apiPreparation"
        def create_agent = apiPreparation(null)[0]
        for (i in [load_release_info()[0],load_release_info()[1]].transpose()){
            if(!(i[0] in existing_agents_list())){
                def payload = """{
                    "displayName": "${i[0]}",
                    "defaultLanguageCode": "en",
                    "timeZone": "Asia/Tokyo", 
                    "description": "${i[0]} agent"
                    }"""
                create_agent.setRequestMethod("POST")
                create_agent.setDoOutput(true)
                create_agent.getOutputStream().write(payload.getBytes("UTF-8"))
                def agnt_details = new JsonSlurperClassic().parseText(create_agent.inputStream.text)
                def name = agnt_details.name.split('/')
                def agent_id = name[name.length - 1]
                def display_name = agnt_details.displayName
                def agntName_n_id = ["${display_name}": " ${agent_id}"]
                println ("--> ${agntName_n_id} Agent is created")
                restore_agent(agent_id, i[0], i[1])
                println ("--> Blob is uploaded to ${display_name} agent")
            }
            else{
                println("--> ${i[0]} is already exists. Can't be recreated.")
            }
        }
    }
}
return this
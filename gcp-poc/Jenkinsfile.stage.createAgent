#!/usr/bin/env groovy
import groovy.json.JsonSlurperClassic

def call(){
    env.token = new File("${env.WORKSPACE}/token.txt").text.trim()
    def load_release_info = load "${env.WORKSPACE}/gcp-poc/Jenkinsfile.util.readJsonfile"
    def restore_agent = load "${env.WORKSPACE}/gcp-poc/Jenkinsfile.util.restoreAgent"
    def existing_agents_list = load "${env.WORKSPACE}/gcp-poc/Jenkinsfile.util.getExistingAgent"
    def exisitng_agents = existing_agents_list()[0]
    if (load_release_info()[0].size() != 0){
        println ("** Start CREATING agent **")
        for (i in [load_release_info()[0],load_release_info()[1]].transpose()){
            if(!(i[0] in exisitng_agents)){
                def api_url = "https://asia-northeast1-dialogflow.googleapis.com/v3/projects/${PROJECT_NAME}/locations/${LOCATION}/agents"
                def call_agent_api_url = new URL("${api_url}").openConnection()
                call_agent_api_url.setRequestProperty("Authorization", "Bearer ${token}")
                call_agent_api_url.setRequestProperty("Content-Type", "application/json")
                def payload = """{
                    "displayName": "${i[0]}",
                    "defaultLanguageCode": "en",
                    "timeZone": "Asia/Tokyo", 
                    "description": "${i[0]} agent"
                    }"""
                call_agent_api_url.setRequestMethod("POST")
                call_agent_api_url.setDoOutput(true)
                OutputStream outputStream = call_agent_api_url.getOutputStream()
                outputStream.write(payload.getBytes("UTF-8"))
                def agnt_details = new JsonSlurperClassic().parseText(call_agent_api_url.inputStream.text)
                def name = agnt_details.name.split('/')
                agent_id = name[name.length - 1]
                display_name = agnt_details.displayName
                blob_file_name = i[1]
                def agntName_n_id = ["${display_name}": " ${agent_id}"]
                println ("--> ${agntName_n_id} Agent is created")
                restore_agent(agent_id, display_name, blob_file_name, "create")
                println ("--> Blob is uploaded to agent:${display_name}")
            }
            else{
                println("--> ${i[0]} is already exists. Can't be recreated.")
            }
        }
    }
}
return this